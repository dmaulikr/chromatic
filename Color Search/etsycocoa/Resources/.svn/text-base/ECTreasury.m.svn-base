//
//  ECTreasury.m
//  Etsy Cocoa, Version 2.0
//
//  http://etsycocoa.googlecode.com/
//
//  Copyright (c) 2011, Eternity Technologies.
//  All rights reserved.
// 
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//    * Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//    * Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//    * Neither the name of the Eternity Technologies nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY ETERNITY TECHNOLOGIES ''AS IS'' AND ANY
//  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
//  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
//  DISCLAIMED. IN NO EVENT SHALL ETERNITY TECHNOLOGIES BE LIABLE FOR ANY
//  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
//  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//

#import "ECTreasury.h"
#import "ECResource.h"
#import "ECTreasuryListing.h"
#import "ECTreasuryCounts.h"

@implementation ECTreasury

@synthesize treasuryId;
@synthesize title;
@synthesize treasuryDescription;
@synthesize homepage;
@synthesize mature;
@synthesize locale;
@synthesize commentCount;
@synthesize tags;
@synthesize counts;
@synthesize hotness;
@synthesize hotnessColor;
@synthesize userId;
@synthesize userName;
@synthesize userAvatarId;
@synthesize creationTsz;
@synthesize listings;

- (id) init {	
	self = [super init];
	if(self) {
		self.treasuryId = nil;
		self.title = nil;
		self.treasuryDescription = nil;
		self.homepage = NO;
		self.mature = NO;
		self.locale = nil;
		self.commentCount = -1;
		tags = [[NSMutableArray alloc] init];
		counts = [[NSMutableArray alloc] init];
		self.hotness = -1;
		self.hotnessColor = nil;
		self.userId = -1;
		self.userName = nil;
		self.userAvatarId = -1;
		self.creationTsz = -1;
		listings = [[NSMutableArray alloc] init];
	}
	return self;
}

- (id) initWithJSONString:(id) jsonString {
	
	self.treasuryId = [jsonString valueForKey:@"id"] == [NSNull null] ? @"":[jsonString valueForKey:@"id"];
	self.title = [jsonString valueForKey:@"title"] == [NSNull null] ? @"":[jsonString valueForKey:@"title"];
	self.treasuryDescription = [jsonString valueForKey:@"description"] == [NSNull null] ? @"":[jsonString valueForKey:@"description"];
	self.homepage = [jsonString valueForKey:@"homepage"] == [NSNull null] ? -1:[[jsonString valueForKey:@"homepage"] integerValue];
	self.mature = [jsonString valueForKey:@"mature"] == [NSNull null] ? NO:[[jsonString valueForKey:@"mature"] boolValue];
	self.locale = [jsonString valueForKey:@"locale"] == [NSNull null] ? nil:[jsonString valueForKey:@"locale"];
	self.commentCount = [jsonString valueForKey:@"comment_count"] == [NSNull null] ? -1:[[jsonString valueForKey:@"comment_count"] integerValue];
	
	/* Tags */
	if([jsonString valueForKey:@"tags"] == [NSNull null]) tags = nil;
	else {
		tags = [[NSMutableArray alloc] init];
		for(id tag in [jsonString valueForKey:@"tags"]) {
			[tags addObject:tag];
		}
	}
	
	/* Counts */
	if([jsonString valueForKey:@"counts"] == [NSNull null]) counts = nil;
	else {
		ECTreasuryCounts *newTreasuryCounts = [[ECTreasuryCounts alloc] initWithJSONString:[jsonString valueForKey:@"counts"]];
		[counts release];
		counts = [newTreasuryCounts retain];
		[newTreasuryCounts release];		
	}
	
	self.hotness = [jsonString valueForKey:@"comment_count"] == [NSNull null] ? -1:[[jsonString valueForKey:@"comment_count"] integerValue];
	self.hotnessColor = [jsonString valueForKey:@"hotness_color"] == [NSNull null] ? nil:[jsonString valueForKey:@"hotness_color"];
	self.userId = [jsonString valueForKey:@"user_id"] == [NSNull null] ? -1:[[jsonString valueForKey:@"user_id"] integerValue];;
	self.userName = [jsonString valueForKey:@"user_name"] == [NSNull null] ? @"":[jsonString valueForKey:@"user_name"];;
	self.userAvatarId = [jsonString valueForKey:@"user_avatar_id"] == [NSNull null] ? -1:[[jsonString valueForKey:@"user_avatar_id"] integerValue];;
	self.creationTsz = [jsonString valueForKey:@"creation_Tsz"] == [NSNull null] ? -1:[[jsonString valueForKey:@"creation_Tsz"] integerValue];;
	
	/* Listings */
	if([jsonString valueForKey:@"listings"] == [NSNull null]) listings = nil;
	else listings = [[ECTreasuryListing parseProtocolJSONResponse:[jsonString valueForKey:@"listings"]] retain];
	
	return self;
}

- (void) dealloc {
	[treasuryId release];
	[title release];
	[treasuryDescription release];
	[locale release];
	[hotnessColor release];
	[tags release];
	[userName release];
	[counts release];
	[super dealloc];
}

@end
