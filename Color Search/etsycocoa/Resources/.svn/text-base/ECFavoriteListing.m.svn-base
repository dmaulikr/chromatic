//
//  ECFavoriteListing.m
//  Etsy Cocoa, Version 2.0
//
//  http://etsycocoa.googlecode.com/
//
//  Copyright (c) 2011, Eternity Technologies.
//  All rights reserved.
// 
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//    * Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//    * Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//    * Neither the name of the Eternity Technologies nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY ETERNITY TECHNOLOGIES ''AS IS'' AND ANY
//  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
//  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
//  DISCLAIMED. IN NO EVENT SHALL ETERNITY TECHNOLOGIES BE LIABLE FOR ANY
//  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
//  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//


#import "ECFavoriteListing.h"

#import "ECListing.h"
#import "ECUser.h"

@implementation ECFavoriteListing

@synthesize userId;
@synthesize listingId;
@synthesize creationTsz;

@synthesize listing;
@synthesize user;

- (id) init {
	self = [super init];
	if(self) {
		self.userId = -1;
		self.listingId = -1;
		self.creationTsz = -1;
		self.listing = nil;
		self.user = nil;
	}
	return self;
}

- (id) initWithJSONString:(id) jsonString {
	self = [super init];
	if(self) {
		
		self.userId = [jsonString valueForKey:@"user_id"] == [NSNull null] ? -1:[[jsonString valueForKey:@"user_id"] integerValue];
		self.listingId = [jsonString valueForKey:@"listing_id"] == [NSNull null] ? -1:[[jsonString valueForKey:@"listing_id"] integerValue];
		self.creationTsz = [jsonString valueForKey:@"creation_Tsz"] == [NSNull null] ? -1:[[jsonString valueForKey:@"creation_Tsz"] integerValue];
		
		if([jsonString valueForKey:@"Listing"] != [NSNull null]) {
			ECListing *parsedListing = [[ECListing alloc] initWithJSONString:[jsonString valueForKey:@"Listing"]];
			self.listing = parsedListing;
			[parsedListing release];
		}
		
		if([jsonString valueForKey:@"User"] != [NSNull null]) {
			ECUser *parsedUser = [[ECUser alloc] initWithJSONString:[jsonString valueForKey:@"User"]];
			self.user = parsedUser;
			[parsedUser release];
		}
		
	}
	return self;	
}


- (void) dealloc {
	[listing release];
	[user release];
	[super dealloc];
}

@end
