//
//  ECRequest.m
//  Etsy Cocoa, Version 2.0
//
//  http://etsycocoa.googlecode.com/
//
//  Copyright (c) 2011, Eternity Technologies.
//  All rights reserved.
// 
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//    * Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//    * Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//    * Neither the name of the Eternity Technologies nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY ETERNITY TECHNOLOGIES ''AS IS'' AND ANY
//  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
//  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
//  DISCLAIMED. IN NO EVENT SHALL ETERNITY TECHNOLOGIES BE LIABLE FOR ANY
//  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
//  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//

#import "ECRequest.h"
#import "ECFilter.h"
#import "NSString+URL.h"

@implementation ECRequest

@synthesize httpMethod;

@synthesize needsAuthorization;
@synthesize useSandbox;

@synthesize parserClass;
@synthesize identifier;

@synthesize partialURL;
@synthesize filter;

- (id) init {
	self = [super init];
	if(self){
		httpMethod = ECHTTPMethodNotSet;
		identifier = nil;
		needsAuthorization = NO;
		parameters = [[NSMutableDictionary alloc] init];
		postData = [[NSMutableDictionary alloc] init];
		filter = nil;
	}
	return self;
}

- (void) dealloc {
	[partialURL release];
	[identifier release];
	[parameters release];
	[postData release];
	[filter release];
	[super dealloc];
}

- (void) setParamValue:(id) value forKey:(NSString *) key {
	[parameters setValue:value forKey:key];
}

- (void) setPOSTValue:(id) value forKey:(NSString *) key {
	[postData setValue:value forKey:key];
}

- (NSMutableURLRequest *) urlRequest {

	NSString *baseURLString;
	
	if(filter) [parameters setObject:[filter fieldsQueryString] forKey:@"fields"];
	if(filter) [parameters setObject:[filter includesQueryString] forKey:@"includes"];
	
	/**
	 * Choose the right BASE URL 
	 */
	if(self.useSandbox && !self.needsAuthorization) 
		baseURLString = [[NSString alloc] initWithString:ETSY_V2_API_SANDBOX_PUBLIC_BASE_URL];
	else if(self.useSandbox && self.needsAuthorization) 
		baseURLString = [[NSString alloc] initWithString:ETSY_V2_API_SANDBOX_PRIVATE_BASE_URL];
	else if(!self.useSandbox && self.needsAuthorization) 
		baseURLString = [[NSString alloc] initWithString:ETSY_V2_API_PRIVATE_BASE_URL];
	else if(!self.useSandbox && !self.needsAuthorization) 
		baseURLString = [[NSString alloc] initWithString:ETSY_V2_API_PUBLIC_BASE_URL];
	
	/**
	 * Add the partial URL to the base, and API key
	 */
	NSMutableString *finalURLString = [[NSMutableString alloc] initWithFormat:@"%@%@/?", 
									   baseURLString,
									   self.partialURL];
	
	[baseURLString release];
		
	/**
	 * Parameters 
	 */
	for(id paramKey in parameters) {
		/* If object is a class then loop through the elements */
		if([[parameters objectForKey:paramKey] isKindOfClass:[NSArray class]]) {
			for(id aValue in [parameters objectForKey:paramKey]) {
				[finalURLString appendFormat:@"&%@=%@", paramKey, [aValue urlEncoded]];
			}
		}
		else 
			[finalURLString appendFormat:@"&%@=%@", paramKey, [parameters objectForKey:paramKey]];
	}
	
	/**
	 * URL request 
	 */
	NSURL *url = [NSURL URLWithString:finalURLString];
	NSMutableURLRequest *urlRequest = [NSMutableURLRequest requestWithURL:url];
	
	/* Choose appropriate HTTP method for the request */
	if(httpMethod == ECHTTPMethodGET) [urlRequest setHTTPMethod:@"GET"];
	else if(httpMethod == ECHTTPMethodPOST) [urlRequest setHTTPMethod:@"POST"];
	else if(httpMethod == ECHTTPMethodPUT) [urlRequest setHTTPMethod:@"PUT"];
	else if(httpMethod == ECHTTPMethodDELETE) [urlRequest setHTTPMethod:@"DELETE"];
	
	/**
	 * Convert POST data to string 
	 */
	if(postData) {		
		NSMutableString *httpBodyString = [[NSMutableString alloc] init];
		for(id postDataKey in postData) {
			[httpBodyString appendFormat:@"%@=%@&", postDataKey, [[postData objectForKey:postDataKey] urlEncoded]];
		}
		[urlRequest setHTTPBody:[NSData dataWithBytes:[httpBodyString UTF8String] length:[httpBodyString length]]];
		[httpBodyString release];
	}
	
	NSLog(@"[ECRequest/%@/APIRequest/%@] %@", useSandbox?@"Sandbox":@"Live", [urlRequest HTTPMethod], finalURLString);
	
	[finalURLString release];
	return urlRequest;
}

@end
