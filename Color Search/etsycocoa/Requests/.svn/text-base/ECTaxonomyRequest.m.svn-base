//
//  ECTaxonomyRequest.m
//  Etsy Cocoa, Version 2.0
//
//  http://etsycocoa.googlecode.com/
//
//  Copyright (c) 2011, Eternity Technologies.
//  All rights reserved.
// 
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//    * Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//    * Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//    * Neither the name of the Eternity Technologies nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY ETERNITY TECHNOLOGIES ''AS IS'' AND ANY
//  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
//  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
//  DISCLAIMED. IN NO EVENT SHALL ETERNITY TECHNOLOGIES BE LIABLE FOR ANY
//  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
//  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//

#import "ECTaxonomyRequest.h"

#import "ECCategoryFilter.h"
#import "ECCategory.h"
#import "ECTag.h"

@implementation ECTaxonomyRequest

/*!
 @function getCategoryRequestForTag 
 @abstract Retrieves a top-level Category by tag.
 @discussion GET - /categories/:tag
 @param tag Tag name for the Category query
 */

+ (ECRequest *) getCategoryRequestForTag:(NSString *) tag
{
	ECRequest *request = [[[ECRequest alloc] init] autorelease];
	request.identifier = @"getCategoryRequestForTag";
	request.partialURL = [NSString stringWithFormat:@"/categories/%@", tag];
	request.httpMethod = ECHTTPMethodGET;
	request.parserClass = [ECCategory class];
	return request;
}

/*!
 @function getSubCategorRequestForTag
 @abstract Retrieves a second-level Category by tag and subtag.
 @discussion GET - /categories/:tag/:subtag
 @param tag Tag name for the Sub Category Query
 @param subTag Sub Tag name for the Sub Category Query
 */

+ (ECRequest *) getSubCategorRequestForTag:(NSString *) tag
									subTag:(NSString *) subTag
{
	ECRequest *request = [[[ECRequest alloc] init] autorelease];
	request.identifier = @"getSubCategorRequestForTag";
	request.partialURL = [NSString stringWithFormat:@"/taxonomy/categories/%@/%@", tag, subTag];
	request.httpMethod = ECHTTPMethodGET;
	request.parserClass = [ECCategory class];
	return request;
}

/*!
 @function getSubSubCategoryRequestForTag
 @abstract Retrieves a third-level Category by tag, subtag and subsubtag.
 @discussion GET - /categories/:tag/:subtag/:subsubtag
 @param tag Tag name for the Sub Category Query
 @param subTag Sub Tag name for the Sub Category Query
 @param subSubTag Sub Sub Tag for the Sub Category Query
 */

+ (ECRequest *) getSubSubCategoryRequestForTag:(NSString *) tag 
										subTag:(NSString *) subTag 
									 subSubTag:(NSString *) subSubTag
{
	ECRequest *request = [[[ECRequest alloc] init] autorelease];
	request.identifier = @"getSubSubCategoryRequestForTag";
	request.partialURL = [NSString stringWithFormat:@"/taxonomy/categories/%@/%@/%@", tag, subTag, subSubTag];
	request.httpMethod = ECHTTPMethodGET;
	request.parserClass = [ECCategory class];
	return request;
}

/*!
 @function findAllTopCategoryRequest
 @abstract Retrieves all top-level Categories.
 @discussion GET - /taxonomy/categories
 */

+ (ECRequest *) findAllTopCategoryRequestWithOptionalFilter:(ECCategoryFilter *) filter
{
	ECRequest *request = [[[ECRequest alloc] init] autorelease];
	request.filter = filter;
	request.identifier = @"findAllTopCategoryRequest";
	request.partialURL = [NSString stringWithFormat:@"/taxonomy/categories"];
	request.httpMethod = ECHTTPMethodGET;
	request.parserClass = [ECCategory class];
	return request;
}

/*!
 @function findAllTopCategoryChildrenRequestForTag 
 @abstract Retrieves children of a top-level Category by tag.
 @discussion GET - /taxonomy/categories/:tag
 @param tag Tag Name user for the Category Children Query
 */

+ (ECRequest *) findAllTopCategoryChildrenRequestForTag:(NSString *) tag 
										 optionalFilter:(ECCategoryFilter *) categoryFilter;
{
	ECRequest *request = [[[ECRequest alloc] init] autorelease];
	request.identifier = @"findAllTopCategoryChildrenRequestForTag";
	request.partialURL = [NSString stringWithFormat:@"/taxonomy/categories/%@", tag];
	request.httpMethod = ECHTTPMethodGET;
	request.filter = categoryFilter;
	request.parserClass = [ECCategory class];
	return request;
}

/*!
 @function findAllSubCategoryChildrenRequestForTag
 @abstract Retrieves children of a second-level Category by tag and subtag.
 @discussion GET - /taxonomy/categories/:tag/:subtag
 @param tag Tag Name for Sub Category Children Query
 @param subTag Sub Tag Name for Sub Category Children Query
 */

+ (ECRequest *) findAllSubCategoryChildrenRequestForTag:(NSString *) tag 
												 subTag:(NSString *) subTag 
										 optionalFilter:(ECCategoryFilter *) filter
{
	ECRequest *request = [[[ECRequest alloc] init] autorelease];
	request.identifier = @"findAllSubCategoryChildrenRequestForTag";
	request.partialURL = [NSString stringWithFormat:@"/taxonomy/categories/%@/%@", tag, subTag];
	request.httpMethod = ECHTTPMethodGET;
	request.filter = filter;
	request.parserClass = [ECCategory class];
	return request;
}

/*!
 @function findPopularTagsRequestWithOptionalLimit
 @abstract Retrieves all related tags for the given tag set.
 @discussion GET - /taxonomy/tags
 @param limit Limits the results to a number of responses, use ECLimitDefault if
 you want the API client to decide the limit value
 */

+ (ECRequest *) findPopularTagsRequestWithOptionalLimit:(ECLimit) limit
{
	ECRequest *request = [[[ECRequest alloc] init] autorelease];
	
	request.identifier = @"findPopularTagsRequestWithOptionalLimit";
	request.partialURL = [NSString stringWithFormat:@"/taxonomy/tags"];
	request.httpMethod = ECHTTPMethodGET;
	request.parserClass = [ECTag class];
	return request;
}

/*!
 @function findAllRelatedTagsRequestForTags
 @abstract Retrieves all related tags for the given tag set.
 @discussion GET - /taxonomy/tags/:tags
 @param tags A String array of tag names that the related tags are queried against
 @param limit Limits the results to a number of responses, use ECLimitDefault if
 you want the API client to decide the limit value
 */
+ (ECRequest *) findAllRelatedTagsRequestForTags:(NSArray *) tags 
								   optionalLimit:(ECLimit) limit
{
	/* Flatten array to string */
	NSMutableString *tagsString = [[NSMutableString alloc] init];
	for(id tag in tags) {
		[tagsString appendFormat:@"%@,", tag];
	}
	
	/* Create a request object */
	ECRequest *request = [[[ECRequest alloc] init] autorelease];
	
	request.identifier = @"findAllRelatedTagsRequestForTags";
	request.partialURL = [NSString stringWithFormat:@"/taxonomy/tags/%@", tagsString];
	[request setParamValue:[NSString stringWithFormat:@"%i", limit] forKey:@"limit"];
	request.httpMethod = ECHTTPMethodGET;
	request.parserClass = [ECTag class];
	
	[tagsString release];
	return request;
}

@end
