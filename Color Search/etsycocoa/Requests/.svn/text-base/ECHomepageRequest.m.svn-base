//
//  ECHomepageRequest.m
//  Etsy Cocoa, Version 2.0
//
//  http://etsycocoa.googlecode.com/
//
//  Copyright (c) 2011, Eternity Technologies.
//  All rights reserved.
// 
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//    Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//    Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//    Neither the name of the Eternity Technologies nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY ETERNITY TECHNOLOGIES ''AS IS'' AND ANY
//  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
//  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
//  DISCLAIMED. IN NO EVENT SHALL ETERNITY TECHNOLOGIES BE LIABLE FOR ANY
//  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
//  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//

#import "ECHomepageRequest.h"
#import "ECFeaturedListingPicker.h"
#import "ECFeaturedListing.h"

#import "ECListingFilter.h"

@implementation ECHomepageRequest

/*!
 @function findAllFeaturedListingPickerActive
 @abstract Finds all FeaturedListingPicker in scope active.
 @discussion GET - /homepages/pickers/
 @param limit Number of elements to be returned for this request
 @param offset Offset where the request starts from
 */

+ (ECRequest *) findAllFeaturedListingPickerActiveRequestWithLimit:(ECLimit) limit 
															offset:(NSInteger) offset
{
	ECRequest *request = [[[ECRequest alloc] init] autorelease];

	request.identifier = @"findAllFeaturedListingPickerActiveRequestWithLimit";
	request.partialURL = [NSString stringWithFormat:@"/homepages/pickers/"];
	request.httpMethod = ECHTTPMethodGET;
	request.parserClass = [ECFeaturedListingPicker class];
	
	[request setParamValue:[NSString stringWithFormat:@"%i", limit] forKey:@"limit"];
	[request setParamValue:[NSString stringWithFormat:@"%i", offset] forKey:@"offset"];

	return request;	
}

/*!
 @function getFeaturedListingPickerRequestForIds
 @abstract Retrieves a FeaturedListingPicker by id.
 @discussion GET - /homepages/pickers/:featured_listing_picker_id
 @param featuredListingPickerIds Array of Picker Ids to return FeaturedListingPicker Objects for.
 */

+ (ECRequest *) getFeaturedListingPickerRequestForIds:(NSArray *) featuredListingPickerIds
{
	/* Flatten array to string */
	NSMutableString *featuredListingPickerIdString = [[NSMutableString alloc] init];
	for(id featuredListingPickerId in featuredListingPickerIds) {
		[featuredListingPickerId appendFormat:@"%@,", featuredListingPickerId];
	}
	
	ECRequest *request = [[[ECRequest alloc] init] autorelease];
	
	request.identifier = @"getFeaturedListingPickerRequestForIds";
	request.partialURL = [NSString stringWithFormat:@"/homepages/pickers/%@", featuredListingPickerIdString];
	request.httpMethod = ECHTTPMethodGET;
	request.parserClass = [ECFeaturedListingPicker class];

	[featuredListingPickerIdString release];
	
	return request;	
}

/*!
 @function findAllFeaturedListingPickerFeaturedForIds
 @abstract Retrieves a set of FeaturedListing objects associated to a FeaturedListingPicker.
 @discussion GET - /homepages/pickers/:featured_listing_picker_id/featured
 @param featuredListingPickerIds Array of Picker Ids to return FeaturedListingPicker Objects for.
 @param limit Number of elements to be returned for this request
 @param offset Offset where the request starts from
 @param listingFilter Optional filter parameter to refine query
 */

+ (ECRequest *) findAllFeaturedListingPickerFeaturedRequestForId:(NSInteger) featuredListingPickerId 
														   limit:(ECLimit) limit 
														  offset:(NSInteger) offset 
														  filter:(ECListingFilter<ECFilterDefinition> *) listingFilter

{
	ECRequest *request = [[[ECRequest alloc] init] autorelease];
	
	request.identifier = @"findAllFeaturedListingPickerFeaturedRequestForId";
	request.partialURL = [NSString stringWithFormat:@"/homepages/pickers/%i/featured", featuredListingPickerId];
	request.httpMethod = ECHTTPMethodGET;
	request.parserClass = [ECFeaturedListing class];
	if(listingFilter) request.filter = listingFilter;
	
	[request setParamValue:[NSString stringWithFormat:@"%i", limit] forKey:@"limit"];
	[request setParamValue:[NSString stringWithFormat:@"%i", offset] forKey:@"offset"];
	
	return request;
}

@end
